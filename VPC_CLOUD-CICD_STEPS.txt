#--------------------------------------------------------------------------------#
STEP-1: Create a VPC
# aws ec2 create-vpc --cidr-block 192.168.0.0/16

{
    "Vpc": {
        "VpcId": "vpc-0045214511bc6ad64",
        "InstanceTenancy": "default",
        "Tags": [],
        "CidrBlockAssociationSet": [
            {
                "AssociationId": "vpc-cidr-assoc-09d7d806490af01ee",
                "CidrBlock": "192.168.0.0/16",
                "CidrBlockState": {
                    "State": "associated"
                }
            }
        ],
        "Ipv6CidrBlockAssociationSet": [],
        "State": "pending",
        "DhcpOptionsId": "dopt-a43781dc",
        "CidrBlock": "192.168.0.0/16",
        "IsDefault": false
    }
}


STEP-2: Create a IGW & Attach to VPC
# aws ec2 create-internet-gateway

{
    "InternetGateway": {
        "Tags": [],
        "Attachments": [],
        "InternetGatewayId": "igw-05b9ac0eb6fe18e72"
    }
}

# aws ec2 attach-internet-gateway --vpc-id "vpc-0045214511bc6ad64" --internet-gateway-id "igw-05b9ac0eb6fe18e72"

STEP-3: Create 2 Route Tables i.e. 1. Public & 2. Private route table and attach Public RouteTable with IGW 
# aws ec2 create-route-table --vpc-id "vpc-0045214511bc6ad64"
{
    "RouteTable": {
        "Associations": [],
        "RouteTableId": "rtb-0d08f64cfaa982120",
        "VpcId": "vpc-0045214511bc6ad64",
        "PropagatingVgws": [],
        "Tags": [],
        "Routes": [
            {
                "GatewayId": "local",
                "DestinationCidrBlock": "192.168.0.0/16",
                "State": "active",
                "Origin": "CreateRouteTable"
            }
        ]
    }
}
# aws ec2 create-route-table --vpc-id "vpc-0045214511bc6ad64"
{
    "RouteTable": {
        "Associations": [],
        "RouteTableId": "rtb-0f9dfc0a202535ea7",
        "VpcId": "vpc-0045214511bc6ad64",
        "PropagatingVgws": [],
        "Tags": [],
        "Routes": [
            {
                "GatewayId": "local",
                "DestinationCidrBlock": "192.168.0.0/16",
                "State": "active",
                "Origin": "CreateRouteTable"
            }
        ]
    }
}

Create a route in the route table that points all traffic (0.0.0.0/0) to the Internet gateway.
# aws ec2 create-route --route-table-id "rtb-0d08f64cfaa982120" --destination-cidr-block 0.0.0.0/0 --gateway-id "igw-05b9ac0eb6fe18e72"
{
    "Return": true
}

STEP-4: Create 6 Subnets i.e. 2 Subnets will be Public & 4 should be Private part of 2 Different Availability Zones 

# aws ec2 create-subnet --vpc-id "vpc-0045214511bc6ad64" --cidr-block 192.168.1.0/24 --availability-zone "us-east-1a" 

{
    "Subnet": {
        "AvailabilityZone": "us-east-1a",
        "AvailableIpAddressCount": 251,
        "DefaultForAz": false,
        "Ipv6CidrBlockAssociationSet": [],
        "VpcId": "vpc-0045214511bc6ad64",
        "State": "pending",
        "MapPublicIpOnLaunch": false,
        "SubnetId": "subnet-04fa2a3b0e9f4302f",
        "CidrBlock": "192.168.1.0/24",
        "AssignIpv6AddressOnCreation": false
    }
}

Enable Auto-Assign-Public-IP to Subnet :
# aws ec2 modify-subnet-attribute --subnet-id "subnet-04fa2a3b0e9f4302f" --map-public-ip-on-launch

# aws ec2 create-subnet --vpc-id "vpc-0045214511bc6ad64" --cidr-block 192.168.2.0/24 --availability-zone "us-east-1b"  

{
    "Subnet": {
        "AvailabilityZone": "us-east-1b",
        "AvailableIpAddressCount": 251,
        "DefaultForAz": false,
        "Ipv6CidrBlockAssociationSet": [],
        "VpcId": "vpc-0045214511bc6ad64",
        "State": "pending",
        "MapPublicIpOnLaunch": false,
        "SubnetId": "subnet-03f961b985f4cb54d",
        "CidrBlock": "192.168.2.0/24",
        "AssignIpv6AddressOnCreation": false
    }
}

Enable Auto-Assign-Public-IP to Subnet :
# aws ec2 modify-subnet-attribute --subnet-id "subnet-03f961b985f4cb54d" --map-public-ip-on-launch


# aws ec2 create-subnet --vpc-id "vpc-0045214511bc6ad64" --cidr-block 192.168.3.0/24 --availability-zone "us-east-1a"
{
    "Subnet": {
        "AvailabilityZone": "us-east-1a",
        "AvailableIpAddressCount": 251,
        "DefaultForAz": false,
        "Ipv6CidrBlockAssociationSet": [],
        "VpcId": "vpc-0045214511bc6ad64",
        "State": "pending",
        "MapPublicIpOnLaunch": false,
        "SubnetId": "subnet-0455befd4749873ae",
        "CidrBlock": "192.168.3.0/24",
        "AssignIpv6AddressOnCreation": false
    }
}

# aws ec2 create-subnet --vpc-id "vpc-0045214511bc6ad64" --cidr-block 192.168.4.0/24 --availability-zone "us-east-1b"

{
    "Subnet": {
        "AvailabilityZone": "us-east-1b",
        "AvailableIpAddressCount": 251,
        "DefaultForAz": false,
        "Ipv6CidrBlockAssociationSet": [],
        "VpcId": "vpc-0045214511bc6ad64",
        "State": "pending",
        "MapPublicIpOnLaunch": false,
        "SubnetId": "subnet-0071d45dfc6b71526",
        "CidrBlock": "192.168.4.0/24",
        "AssignIpv6AddressOnCreation": false
    }
}

# aws ec2 create-subnet --vpc-id "vpc-0045214511bc6ad64" --cidr-block 192.168.5.0/24 --availability-zone "us-east-1a"

{
    "Subnet": {
        "AvailabilityZone": "us-east-1a",
        "AvailableIpAddressCount": 251,
        "DefaultForAz": false,
        "Ipv6CidrBlockAssociationSet": [],
        "VpcId": "vpc-0045214511bc6ad64",
        "State": "pending",
        "MapPublicIpOnLaunch": false,
        "SubnetId": "subnet-0318a32b583655e1a",
        "CidrBlock": "192.168.5.0/24",
        "AssignIpv6AddressOnCreation": false
    }
}

# aws ec2 create-subnet --vpc-id "vpc-0045214511bc6ad64" --cidr-block 192.168.6.0/24 --availability-zone "us-east-1b"

{
    "Subnet": {
        "AvailabilityZone": "us-east-1b",
        "AvailableIpAddressCount": 251,
        "DefaultForAz": false,
        "Ipv6CidrBlockAssociationSet": [],
        "VpcId": "vpc-0045214511bc6ad64",
        "State": "pending",
        "MapPublicIpOnLaunch": false,
        "SubnetId": "subnet-06ec0aeb0fd9c1bd7",
        "CidrBlock": "192.168.6.0/24",
        "AssignIpv6AddressOnCreation": false
    }
}

# aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-0045214511bc6ad64" --query 'Subnets[*].{ID:SubnetId,CIDR:CidrBlock}'

[
    {
        "CIDR": "192.168.3.0/24",
        "ID": "subnet-0455befd4749873ae"
    },
    {
        "CIDR": "192.168.1.0/24",
        "ID": "subnet-04fa2a3b0e9f4302f"
    },
    {
        "CIDR": "192.168.4.0/24",
        "ID": "subnet-0071d45dfc6b71526"
    },
    {
        "CIDR": "192.168.6.0/24",
        "ID": "subnet-06ec0aeb0fd9c1bd7"
    },
    {
        "CIDR": "192.168.5.0/24",
        "ID": "subnet-0318a32b583655e1a"
    },
    {
        "CIDR": "192.168.2.0/24",
        "ID": "subnet-03f961b985f4cb54d"
    }
]

STEP-5: 2 Public Subnet Association with Public Route Table & 4 Private Subnets association with Private RouteTable
# aws ec2 associate-route-table  --subnet-id "subnet-04fa2a3b0e9f4302f" --route-table-id "rtb-0d08f64cfaa982120"
{
    "AssociationId": "rtbassoc-0a9c1418a35697e46"
}

# aws ec2 associate-route-table  --subnet-id "subnet-03f961b985f4cb54d" --route-table-id "rtb-0d08f64cfaa982120"
{
    "AssociationId": "rtbassoc-02cb9e4cb1fc28532"
}

# aws ec2 associate-route-table  --subnet-id "subnet-0455befd4749873ae" --route-table-id "rtb-0f9dfc0a202535ea7"
{
    "AssociationId": "rtbassoc-0757408741cdfc1d3"
}

# aws ec2 associate-route-table  --subnet-id "subnet-0071d45dfc6b71526" --route-table-id "rtb-0f9dfc0a202535ea7"
{
    "AssociationId": "rtbassoc-0ef3941dd48a05898"
}

# aws ec2 associate-route-table  --subnet-id "subnet-0318a32b583655e1a" --route-table-id "rtb-0f9dfc0a202535ea7"
{
    "AssociationId": "rtbassoc-0215e8d74c15fa308"
}

# aws ec2 associate-route-table  --subnet-id "subnet-06ec0aeb0fd9c1bd7" --route-table-id "rtb-0f9dfc0a202535ea7"
{
    "AssociationId": "rtbassoc-0bf5d661fddd68a84"
}

STEP-5.A : To create a network ACL for the specified VPC
# aws ec2 create-network-acl --vpc-id "vpc-0045214511bc6ad64"
{
    "NetworkAcl": {
        "Associations": [],
        "NetworkAclId": "acl-093bebcb43fe1d223",
        "VpcId": "vpc-0045214511bc6ad64",
        "Tags": [],
        "Entries": [
            {
                "IcmpTypeCode": {},
                "RuleNumber": 32767,
                "Protocol": "-1",
                "PortRange": {},
                "Egress": true,
                "RuleAction": "deny",
                "CidrBlock": "0.0.0.0/0"
            },
            {
                "IcmpTypeCode": {},
                "RuleNumber": 32767,
                "Protocol": "-1",
                "PortRange": {},
                "Egress": false,
                "RuleAction": "deny",
                "CidrBlock": "0.0.0.0/0"
            }
        ],
        "IsDefault": false
    }
}

Inbound Traffic:
# aws ec2 create-network-acl-entry --network-acl-id "acl-093bebcb43fe1d223" --ingress --rule-number 110 --protocol tcp --port-range From=22,To=22 --cidr-block 0.0.0.0/0 --rule-action allow
# aws ec2 create-network-acl-entry --network-acl-id "acl-093bebcb43fe1d223" --ingress --rule-number 100 --protocol tcp --port-range From=80,To=80 --cidr-block 0.0.0.0/0 --rule-action allow
# aws ec2 create-network-acl-entry --network-acl-id "acl-093bebcb43fe1d223" --ingress --rule-number 120 --protocol udp --port-range From=53,To=53 --cidr-block 0.0.0.0/0 --rule-action allow

Outbound Traffic:
# aws ec2 create-network-acl-entry --network-acl-id "acl-093bebcb43fe1d223" --egress --rule-number 110 --protocol tcp --port-range From=22,To=22 --cidr-block 0.0.0.0/0 --rule-action allow
# aws ec2 create-network-acl-entry --network-acl-id "acl-093bebcb43fe1d223" --egress --rule-number 100 --protocol tcp --port-range From=80,To=80 --cidr-block 0.0.0.0/0 --rule-action allow
# aws ec2 create-network-acl-entry --network-acl-id "acl-093bebcb43fe1d223" --egress --rule-number 120 --protocol udp --port-range From=53,To=53 --cidr-block 0.0.0.0/0 --rule-action allow



STEP-6: Create EC2 security Groups i.e. SSH
# aws ec2 create-security-group --group-name "sg_ec2_CICD_ELB" --description "ELB SG PORT-80" --vpc-id "vpc-0045214511bc6ad64"

{
    "GroupId": "sg-0cc74589340966d46"
}

Enable a specific port on Security Group:

# aws ec2 authorize-security-group-ingress --group-id "sg-0cc74589340966d46" --protocol tcp --port 80 --cidr 0.0.0.0/0

STEP-8: Create Classic ELB and security Group i.e. HTTP 
# aws elb create-load-balancer --load-balancer-name "ELBASCICD" --listeners "Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80" --subnets "subnet-04fa2a3b0e9f4302f" "subnet-03f961b985f4cb54d" --security-groups "sg-0cc74589340966d46"
{
    "DNSName": "ELBASCICD-994565741.us-east-1.elb.amazonaws.com"
}
# aws elb configure-health-check --load-balancer-name "ELBASCICD" --health-check Target=HTTP:80/index.html,Interval=10,UnhealthyThreshold=2,HealthyThreshold=2,Timeout=3
{
    "HealthCheck": {
        "HealthyThreshold": 2,
        "Interval": 10,
        "Target": "HTTP:80/index.html",
        "Timeout": 3,
        "UnhealthyThreshold": 2
    }
}

STEP-9: Create Launch Configuration and security group i.e. SSH-HTTP-HTTPS-DB-ICMP

# cat myuserdata.txt
#!/bin/bash
yum update -y
yum install http* --skip-broken -y
service httpd start
chkconfig httpd on
echo "Welcome to VPC ELB & AutoScaling" > /var/www/html/index.html

STEP-9.A: Create LC Group security Groups i.e. SSH-HTTP-DB-ICMP
# aws ec2 create-security-group --group-name "sg_lcgroup" --description "LCG_SSH_HTTP_DB" --vpc-id "vpc-0045214511bc6ad64"
{
    "GroupId": "sg-09ccd314f6ba6db1b"
}

Enable a specific port on Security Group:

# aws ec2 authorize-security-group-ingress --group-id "sg-09ccd314f6ba6db1b" --protocol tcp --port 22 --cidr 0.0.0.0/0
# aws ec2 authorize-security-group-ingress --group-id "sg-09ccd314f6ba6db1b" --protocol tcp --port 80 --cidr 0.0.0.0/0
# aws ec2 authorize-security-group-ingress --group-id "sg-09ccd314f6ba6db1b" --protocol tcp --port 3306 --cidr 0.0.0.0/0

# aws autoscaling create-launch-configuration --launch-configuration-name "CICD_LC" --key-name "nn_kk" --image-id "ami-0ff8a91507f77f867" --instance-type t2.micro --security-groups "sg-09ccd314f6ba6db1b" --user-data file://myuserdata.txt

STEP-11: Launch Bastion Server part of Public Subnet which is part of one of the Availability Zone i.e. us-east-1a

# aws ec2 run-instances --image-id "ami-0ff8a91507f77f867" --count 1 --instance-type t2.micro --key-name nn_kk --security-group-ids "sg-09ccd314f6ba6db1b" --subnet-id "subnet-04fa2a3b0e9f4302f" --tag-specifications 'ResourceType=instance,Tags=[{Key=ToDoAdministration,Value=BastionServer}]'
"InstanceId": "i-03327ff0b02915a27"

STEP-12: Launch NAT Gateway part of another Public Subnet which is part of another Availability Zone i.e. us-east-1b

root@ip-172-31-30-218:~# aws ec2 create-nat-gateway --subnet-id "subnet-03f961b985f4cb54d" --allocation-id eipalloc-0f9f7bd9e0bd92efa
{
    "NatGateway": {
        "NatGatewayAddresses": [
            {
                "AllocationId": "eipalloc-0f9f7bd9e0bd92efa"
            }
        ],
        "VpcId": "vpc-0045214511bc6ad64",
        "State": "pending",
        "NatGatewayId": "nat-0fa61b65819e8ddf7",
        "SubnetId": "subnet-03f961b985f4cb54d",
        "CreateTime": "2018-09-07T08:55:32.000Z"
    }
}

# aws ec2 describe-subnets --region us-east-1 --subnet-ids "subnet-02201f4ce3f502164" --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}"

Create a route in the route table that points all traffic (0.0.0.0/0) to the Internet gateway.
# aws ec2 create-route --route-table-id "rtb-0f9dfc0a202535ea7" --destination-cidr-block 0.0.0.0/0 --nat-gateway-id "nat-0fa61b65819e8ddf7"   
{
    "Return": true
}

STEP-10: Create AutoScaling & Configure Increase Scaling Group & Descrease Scaling Group & Map with Launch Configuration & Classic ELB 

# aws autoscaling create-auto-scaling-group --auto-scaling-group-name "OU_AS" --launch-configuration-name "CICD_LC" --load-balancer-names "ELBASCICD" --min-size 2 --max-size 5 --vpc-zone-identifier "subnet-0455befd4749873ae","subnet-0071d45dfc6b71526" 


STEP-9.A: Create LC Group security Groups i.e. DB
# aws ec2 create-security-group --group-name "sg_DB" --description "RDS" --vpc-id "vpc-0045214511bc6ad64"

{
    "GroupId": "sg-04678262f37863226"
}

Enable a specific port on Security Group:

# aws ec2 authorize-security-group-ingress --group-id "sg-04678262f37863226" --protocol tcp --port 3306 --cidr 0.0.0.0/0 

# aws rds create-db-instance --db-instance-identifier sg-cli-test --allocated-storage 20 --db-instance-class db.t2.small --engine mysql --master-username cloudcicd --master-user-password cloudcicd --db-name cloudcicd --port 3306 --db-subnet-group-name "subnet-084e774a2a5354d3c" --db-security-groups "sg-000d422cd10e81ed8"

# aws rds create-db-instance --db-instance-identifier sg-cli-test --allocated-storage 20 --db-instance-class db.t2.small --engine mysql --master-username cloudcicd --master-user-password cloudcicd --db-name cloudcicd --port 3306 --availability-zone us-east-1a --vpc-security-group-ids "sg-000d422cd10e81ed8"

#--------------------------------------------------------------------------------#

# aws ec2 describe-vpc-peering-connections
{
    "VpcPeeringConnections": []
}

# aws ec2 describe-vpc-peering-connections --filters Name=requester-vpc-info.vpc-id,Values=vpc-0045214511bc6ad64
{
    "VpcPeeringConnections": []
}

# aws ec2 create-vpc-peering-connection --vpc-id "vpc-02c6f6694acc5b388" --peer-vpc-id "vpc-0045214511bc6ad64"

{                                                                                                                                                                 
    "VpcPeeringConnection": {                                                                                                                                     
        "Status": {                                                                                                                                               
            "Message": "Initiating Request to 898594748181",                                                                                                      
            "Code": "initiating-request"                                                                                                                          
        },                                                                                                                                                        
        "Tags": [],                                                                                                                                               
        "RequesterVpcInfo": {                                                                                                                                     
            "PeeringOptions": {                                                                                                                                   
                "AllowEgressFromLocalVpcToRemoteClassicLink": false,                                                                                              
                "AllowDnsResolutionFromRemoteVpc": false,                                                                                                         
                "AllowEgressFromLocalClassicLinkToRemoteVpc": false                                                                                               
            },                                                                                                                                                    
            "VpcId": "vpc-02c6f6694acc5b388",                                                                                                                     
            "Region": "us-east-1",                                                                                                                                
            "OwnerId": "898594748181",                                                                                                                            
            "CidrBlockSet": [                                                                                                                                     
                {                                                                                                                                                 
                    "CidrBlock": "10.0.0.0/16"                                                                                                                    
                }                                                                                                                                                 
            ],                                                                                                                                                    
            "CidrBlock": "10.0.0.0/16"                                                                                                                            
        },                                                                                                                                                        
        "VpcPeeringConnectionId": "pcx-0082fabfcde102917",                                                                                                        
        "ExpirationTime": "2018-09-14T09:36:01.000Z",                                                                                                             
        "AccepterVpcInfo": {                                                                                                                                      
            "OwnerId": "898594748181",                                                                                                                            
            "Region": "us-east-1",                                                                                                                                
            "VpcId": "vpc-0045214511bc6ad64"                                                                                                                      
        }                                                                                                                                                         
    }                                                                                                                                                             
}                

To accept a VPC peering connection:
# aws ec2 accept-vpc-peering-connection --vpc-peering-connection-id "pcx-0082fabfcde102917"  

{
    "VpcPeeringConnection": {
        "Status": {
            "Message": "Provisioning",
            "Code": "provisioning"
        },
        "Tags": [],
        "AccepterVpcInfo": {
            "PeeringOptions": {
                "AllowEgressFromLocalVpcToRemoteClassicLink": false,
                "AllowDnsResolutionFromRemoteVpc": false,
                "AllowEgressFromLocalClassicLinkToRemoteVpc": false
            },
            "VpcId": "vpc-0045214511bc6ad64",
            "Region": "us-east-1",
            "OwnerId": "898594748181",
            "CidrBlockSet": [
                {
                    "CidrBlock": "192.168.0.0/16"
                }
            ],
            "CidrBlock": "192.168.0.0/16"
        },
        "VpcPeeringConnectionId": "pcx-0082fabfcde102917",
        "RequesterVpcInfo": {
            "PeeringOptions": {
                "AllowEgressFromLocalVpcToRemoteClassicLink": false,
                "AllowDnsResolutionFromRemoteVpc": false,
                "AllowEgressFromLocalClassicLinkToRemoteVpc": false
            },
            "VpcId": "vpc-02c6f6694acc5b388",
            "Region": "us-east-1",
            "OwnerId": "898594748181",
            "CidrBlockSet": [
                {
                    "CidrBlock": "10.0.0.0/16"
                }
            ],
            "CidrBlock": "10.0.0.0/16"
        }
    }
}
                                                                                                                                               